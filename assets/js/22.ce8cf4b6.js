(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{382:function(t,r,a){"use strict";a.r(r);var e=a(42),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"链表和递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表和递归"}},[t._v("#")]),t._v(" 链表和递归")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("递归总有一个最简单的情况——方法的第一条语句总是一个包含 return 的条件语句。")])]),t._v(" "),a("li",[a("p",[t._v("递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。在下面的代码中，第四个参数和第三个参数的差值一直在缩小。")])]),t._v(" "),a("li",[a("p",[t._v("递归调用的父问题和尝试解决的子问题之间不应该有交集。在下面的代码中，两个子问题各自操作的数组部分是不同的。")])])]),t._v(" "),a("h2",{attrs:{id:"递归函数的-微观-解读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归函数的-微观-解读"}},[t._v("#")]),t._v(" 递归函数的“微观”解读")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("递归函数的调用，本质就是函数调用")])]),t._v(" "),a("li",[a("p",[t._v("只不过调用的函数是自己而已")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);