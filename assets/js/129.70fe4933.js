(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{487:function(t,a,e){"use strict";e.r(a);var r=e(42),p=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"导读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导读"}},[t._v("#")]),t._v(" 导读")]),t._v(" "),e("p",[t._v("这里记录了本人学习 react 的历程")]),t._v(" "),e("h2",{attrs:{id:"webstorm-快速生成-react-模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webstorm-快速生成-react-模板"}},[t._v("#")]),t._v(" webstorm 快速生成 react 模板")]),t._v(" "),e("p",[t._v("rcc + tab 键 - - 用 ES6 模块系统创建一个 React 组件类")]),t._v(" "),e("p",[t._v("rccp + tab 键 - - 创建一个带有 PropTypes 和 ES6 模块系统的 React 组件类")]),t._v(" "),e("p",[t._v("rcfc + tab 键 - - 创建一个带有 PropTypes 和所有生命周期方法以及 ES6 模块系统的 React 组件类")]),t._v(" "),e("p",[t._v("rcjc + tab 键 - - 用 ES6 模块系统创建一个 React 组件类（无导出）")]),t._v(" "),e("p",[t._v("rdp + tab 键 - - 快速生成 defaultProps")]),t._v(" "),e("p",[t._v("rpc + tab 键 - - 用 PropTypes 和 ES6 moudle 系统创建一个 React 纯组件类")]),t._v(" "),e("p",[t._v("rrc + tab 键 - - 创建一个连接到 redux 的 React 组件类")]),t._v(" "),e("p",[t._v("rrdc + tab 键 - - 创建一个通过 dispatch 连接到 redux 的 React 组件类")]),t._v(" "),e("p",[t._v("rsc + tab 键 - - 创建没有 PropTypes 和 ES6 模块系统的无状态 React 组件")]),t._v(" "),e("p",[t._v("rscp + tab 键 - - 创建有 PropTypes 和 ES6 模块系统的无状态 React 组件")]),t._v(" "),e("p",[t._v("rsf + tab 键 - - 以命名函数的形式创建无状态的 React 组件，不使用 PropTypes")]),t._v(" "),e("p",[t._v("rsfp + tab 键 - - 使用 PropTypes 将无状态的 React 组件作为命名函数创建")]),t._v(" "),e("p",[t._v("rsi + tab 键 - - 创建无状态的 React 组件，不使用 PropTypes 和 ES6 模块系统，但使用隐式返回和道具")]),t._v(" "),e("p",[t._v("rwwd + tab 键 - - 在没有导入的情况下，在 ES6 模块系统中创建一个有构造函数、空状态、proptypes 和导出的 React 组件类。(主要用于 React 时，proptype 由 webpack 提供插件提供")])])}),[],!1,null,null,null);a.default=p.exports}}]);